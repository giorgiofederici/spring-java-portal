#Default Header
sjp.default.header.title = Spring Java Portal
sjp.default.header.subtitle = Created by Giorgio Federici
sjp.default.header.italian = Italian
sjp.default.header.english = English
sjp.default.header.nav.top.home = Home
sjp.default.header.nav.top.signup = Sign Up
sjp.default.header.nav.top.signin = Sign In

#Default Main Navigation
default.nav.main.home = Home
default.nav.main.showcases = Showcases
default.nav.main.showcases.all = All Showcases
default.nav.main.showcases.onlineCartSystem = Online Cart
default.nav.main.showcases.dataScience = Data Science
default.nav.main.technologies = Technologies
default.nav.main.architecture = Architecture
default.nav.main.about = About

#Index
sjp.index.section.one.title = Welcome to the Spring Java Portal
sjp.index.section.one.description = The Spring Java Portal is a web application created to collect and show most of my knowledge related to the Java world. Highlighted Java technologies are:
sjp.index.section.one.list.first = Java SE
sjp.index.section.one.list.second = J2EE
sjp.index.section.one.list.third = Spring MVC Framework
sjp.index.section.one.list.fourth = Spring Security
sjp.index.section.one.list.fifth = Spring Social
sjp.index.section.one.list.sixth = Hibernate
sjp.index.section.one.list.seventh = Charts
sjp.index.section.one.list.eighth = Reports
sjp.index.section.two.title = All about Java?
sjp.index.section.two.description = The aim of the Spring Java Portal is also to show modern web application development, so there are many other technologies used here:
sjp.index.section.two.list.first = HTML5/CSS3
sjp.index.section.two.list.second = Bootstrap
sjp.index.section.two.list.third = Javascript
sjp.index.section.two.list.fourth = jQuery
sjp.index.section.two.list.fifth = MySQL
sjp.index.section.two.list.sixth = Amazon Web Service
sjp.index.section.three.title = Source Code
sjp.index.section.three.description = The Spring Java Portal is a work in progress project. You can keep track of different versions and check at the code on my Github repository
sjp.index.section.three.github.link = Spring Java Portal Github

#Showcases
sjp.showcases.section.one.title = Showcases
sjp.showcases.section.one.description = You can select the showcase you are looking for!

#Showcases Online Cart System
sjp.showcases.ocs.title = Online Cart
sjp.showcases.ocs.description = Online Cart is an e-commerce workflow management showcase. This prototype follows a process starting from the catalog view up to receipt issuance.
sjp.showcases.ocs.activity = Activiti BPMN 2.0
sjp.showcases.ocs.activity.description = Online Cart implemented with Activiti BPMN 2.0
sjp.showcases.ocs.springWebFlow = Spring Web Flow
sjp.showcases.ocs.springWebFlow.description = Online Cart implemented with Spring Web Flow
sjp.showcases.ocs.apachePluto = Apache Pluto
sjp.showcases.ocs.apachePluto.description = Online Cart implemented with Apache Pluto

#Showcases OCS WebFlow Customer Info
sjp.showcases.ocs.webflow.title = Customer Details
sjp.showcases.ocs.webflow.form.name = Name
sjp.showcases.ocs.webflow.form.doorNumber = Door Number
sjp.showcases.ocs.webflow.form.streetName = Street Name
sjp.showcases.ocs.webflow.form.areaName = Area Name
sjp.showcases.ocs.webflow.form.state = State
sjp.showcases.ocs.webflow.form.country = Country
sjp.showcases.ocs.webflow.form.zipCode = Zip Code
sjp.showcases.ocs.webflow.form.phoneNumber = Phone Number
sjp.showcases.ocs.webflow.form.submit = Add
sjp.showcases.ocs.webflow.form.cancel = Cancel

#Showcases OCS WebFlow Shipping Details
sjp.showcases.ocs.webflow.shipping.title = Shipping Details
sjp.showcases.ocs.webflow.shipping.form.name = Name
sjp.showcases.ocs.webflow.shipping.form.shippingDate = Shipping Date
sjp.showcases.ocs.webflow.shipping.form.doorNumber = Door Number
sjp.showcases.ocs.webflow.shipping.form.streetName = Street Name
sjp.showcases.ocs.webflow.shipping.form.areaName = Area Name
sjp.showcases.ocs.webflow.shipping.form.state = State
sjp.showcases.ocs.webflow.shipping.form.country = Country
sjp.showcases.ocs.webflow.shipping.form.zipCode = Zip Code
sjp.showcases.ocs.webflow.shipping.form.phoneNumber = Phone Number
sjp.showcases.ocs.webflow.shipping.form.submit = Add
sjp.showcases.ocs.webflow.shipping.form.cancel = Cancel
sjp.showcases.ocs.webflow.shipping.form.back = Back

#Showcases OCS WebFlow Checkout Cancelled
sjp.showcases.ocs.webflow.checkout.cancelled.description = Your checkout process has been cancelled!

#Showcases Data Science
sjp.showcases.data.science.title = Data Science
sjp.showcases.data.science.testClick = Click to test!
sjp.showcases.data.science.first.title = Retrieving all filenames from hierarchical directories using Java
sjp.showcases.data.science.first.description = The first data science showcase shows how to retrieve the file paths and names from a complex directory structure that contains numerous directories and files inside a root directory.
sjp.showcases.data.science.second.title = Retrieving all filenames from hierarchical directories using Apache Commons IO
sjp.showcases.data.science.second.description = Listing of file names in hierarchical directories can be done recursively as demonstrated in the previous recipe. However, this can be done in a much easier and convenient way and with less coding using the Apache Commons IO library.
sjp.showcases.data.science.third.title = Reading contents from text files all at once using Java 8
sjp.showcases.data.science.third.description = There are many different ways to read text file contents, and they each have their own pros and cons: some of them consume time and memory, while some are fast and do not require much computer memory; some read the text contents all at once, while some read text files line by line. This recipe demonstrates how to read text file contents all at once using Java 8.
sjp.showcases.data.science.fourth.title = Reading contents from text files all at once using Apache Commons IO
sjp.showcases.data.science.fourth.description = The same functionality described in the previous recipe can be achieved using Apache Commons IO API.
sjp.showcases.data.science.fifth.title = Extracting PDF text using Apache Tika
sjp.showcases.data.science.fifth.description = One of the most difficult file types for parsing and extracting data is PDF. Some PDFs are not even possible to parse because they are password-protected, while some others contain scanned texts and images. This recipe demonstrates how to extract text from PDF files using Apache Tika, given that the file is not encrypted or password-protected and contains text that is not scanned.
sjp.showcases.data.science.sixth.title = Cleaning ASCII text files using Regular Expressions
sjp.showcases.data.science.sixth.description = ASCII text files can contain unnecessary units of characters that eventually are introduced during a conversion process, such as PDF-to-text conversion or HTML-to-text conversion. These characters are often seen as noise because they are one of the major roadblocks for data processing. This recipe cleans several noises from ASCII text data using Regular Expressions.
sjp.showcases.data.science.seventh.title = Parsing Comma Separated Value (CSV) Files using Univocity 
sjp.showcases.data.science.seventh.description = Another very common file type that data scientists handle is Comma Separated Value (CSV) files, where data is separated by commas. CSV files are very popular because they can be read by most of the spreadsheet applications, such as MS Excel. In this recipe, we will see how we can parse CSV files and handle data points retrieved from them.
sjp.showcases.data.science.eighth.title = Parsing Tab Separated Value (TSV) file using Univocity 
sjp.showcases.data.science.eighth.description = Unlike CSV files, Tab Separated Value (TSV) files contain data that is separated by tab delimiters. This recipe shows you how to retrieve data points from TSV files.
sjp.showcases.data.science.nineth.title = Parsing XML files using JDOM
sjp.showcases.data.science.nineth.description = Unlike text data, which is often unstructured, organizing data in XML files is a popular method to prepare, convey, and exploit data in a structured way. There are several ways to parse contents of XML files. We will limit our recipes to an external Java library for XML parsing named JDOM.
sjp.showcases.data.science.tenth.title = Writing JSON files using JSON.simple
sjp.showcases.data.science.tenth.description = JSON is a human-readable Data Interchange Format that is lightweight. It stands for JavaScript Object Notation. This is becoming a popular format generated and parsed by modern web applications. In this recipe, you will see how you can write JSON files.
sjp.showcases.data.science.eleventh.title = Reading JSON files using JSON.simple
sjp.showcases.data.science.eleventh.description = In this recipe, we will see how we can read or parse a JSON file.
sjp.showcases.data.science.twelveth.title = Extracting web data from a URL using JSoup
sjp.showcases.data.science.twelveth.description = A large amount of data, nowadays, can be found on the Web. This data is sometimes structured, semi-structured, or even unstructured. Therefore, very different techniques are needed to extract them. There are many different ways to extract web data. One of the easiest and handy ways is to use an external Java library named JSoup. This recipe uses a certain number of methods offered in JSoup to extract web data.
sjp.showcases.data.science.thirteenth.title = Extracting web data from a website using Selenium Webdriver
sjp.showcases.data.science.thirteenth.description = Selenium is a Java-based tool to help automating software testing or quality assurance. Interestingly enough, Selenium can be used to automatically retrieve and utilize web data.



#Architecture
sjp.architecture.section.one.title = General Architecture
sjp.architecture.section.one.description = The Spring Java Potal architecture is organized on many functional layers. The following image shows a schema for the general architecture.

#About
sjp.about.section.one.title = About
sjp.about.section.one.description = I graduated from Sapienza, University of Rome with a Bachelor and Master's degree. I am passionate about technology and have been since my childhood - I used to spend most of my time playing videogames. With my degree I turned this passion into a profession: computers and IT assist me to share my creative and innovative ideas, while engineering studies help me to think outside the box. I am never satisfied about what I know and I always try to learn new things. I think this is the only way to broaden my career path following what I like and improving what I do. So far, I am a developer but I would like to use my engineering knowledge more, in order to create new software architectures and standards. After my graduation, I have worked in Sogetel S.r.l. (Rome, Italy) for 1 year as a Java programmer and web application developer. I have had to deal with many of the various problems and difficult situations that can arise during development and release process - lack of time, change of requirements, internal problems with technologies. Then, to improve my English level, I have studied at Atlantic Language School (www.atlanticlanguage.com) in Galway, Ireland. In June 2014, I went back to Italy and started to work for Engineering Group S.p.a., a leading IT company in Italy, as a Junior Solution Developer, SpagoBI Team (R&D department – Turin, Italy). After almost two years, I left Engineering Group S.p.a and Italy. Now I am living in Galway, Ireland. Here, I have worked for SAP Ireland, as a Software Developer in the Cloud Service Centre Team.

#Technologies
sjp.techs.title = Technologies
sjp.techs.db = Database
sjp.techs.hibernate = Hibernate
sjp.techs.javaSE = Java SE

#Sign Up
sjp.signup.title = Sign Up
sjp.signup.form.username = Username
sjp.signup.form.email = E-Mail
sjp.signup.form.password = Password
sjp.signup.form.confirmPassword = Confirm Password
sjp.signup.form.submit = Sign Up

#Sign Up Form Validation
sjp.signup.form.username.notNull = Username field can not be empty
sjp.signup.form.username.notEmpty = Username field can not be empty
sjp.signup.form.username.length = Username field can contain max 50 characters
sjp.signup.form.email.notNull = E-Mail field can not be empty
sjp.signup.form.email.notEmpty = E-Mail field can not be empty
sjp.signup.form.email.length = E-Mail field can contain max 50 characters
sjp.signup.form.email.email = E-Mail field must be a valid email address
sjp.signup.form.password.notNull = Password field can not be empty
sjp.signup.form.password.notEmpty = Password field can not be empty
sjp.signup.form.password.length = Password field can contain max 50 characters

#Sign Up Success
sjp.signup.success.description = Registration successful!


#Sign In
sjp.signin.title = Sign In
sjp.signin.form.username = Username
sjp.signin.form.password = Password
sjp.signin.form.submit = Login


#Sign In Form Validation
sjp.signin.validation.user.disabled = The Username specified is not enabled
sjp.signin.validation.user.invalid = Username and Password invalid



#User Header
sjp.user.header.nav.top.userProfile = User Profile
sjp.user.header.nav.top.logout = Logout

#User Main Navigation
sjp.user.nav.main.ocs = Oline Cart
sjp.user.nav.main.social = Social
sjp.user.nav.main.twitter = Twitter

#User Index
sjp.user.index.profile.username = Username:
sjp.user.index.profile.email = E-Mail:
sjp.user.index.upload = Upload 

#User Twitter Connect
sjp.user.twitter.connect.title = Twitter Connection
sjp.user.twitter.connect.description = You aren't connected to Twitter yet. Click the button to connect this application with your Twitter account.
sjp.user.twitter.connect.form.submit = Connect to Twitter

#User Twitter Connected
sjp.user.twitter.connected.title = Connected to Twitter!
sjp.user.twitter.connected.description = You are now connected to your Twitter account.
sjp.user.twitter.connected.accessProfile = Click here to access your Twitter profile

#User Twitter Profile
sjp.user.twitter.profile.title = Twitter Profile
sjp.user.twitter.profile.tweets = Tweets
sjp.user.twitter.profile.followers = Followers
sjp.user.twitter.profile.following = Following
sjp.user.twitter.profile.search = Twitter Search
sjp.user.twitter.profile.search.dashboard = Search Dashboard
sjp.user.twitter.profile.search.tweets = Tweets
sjp.user.twitter.profile.search.retweets = Retweets
sjp.user.twitter.profile.search.users = Users

#User OCS
sjp.user.ocs.customer.account.title = Create Customer Account

#User OCS Customer Account
sjp.user.ocs.customer.account.form.username = Username
sjp.user.ocs.customer.account.form.firstName = First Name
sjp.user.ocs.customer.account.form.lastName = Last Name
sjp.user.ocs.customer.account.form.midName = Middle Name
sjp.user.ocs.customer.account.form.email = E-Mail
sjp.user.ocs.customer.account.form.mobile = Mobile
sjp.user.ocs.customer.account.form.address = Address
sjp.user.ocs.customer.account.form.birthDate = Birth Date
sjp.user.ocs.customer.account.form.submit = Confirm


#Admin Main Navigation
sjp.admin.nav.main.usersManagement = Users Management
sjp.admin.nav.main.ocsManagement = OCS Management

#Admin Users Management
sjp.admin.users.management.table.username = Username
sjp.admin.users.management.table.email = E-Mail
sjp.admin.users.management.table.enabled = Enabled
sjp.admin.users.management.table.actions = Actions

#Admin Users Management Edit
sjp.admin.users.management.edit.title = Edit User:
sjp.admin.users.management.edit.form.username = Username
sjp.admin.users.management.edit.form.email = E-Mail
sjp.admin.users.management.edit.form.enabled = Enabled
sjp.admin.users.management.edit.form.submit = Confirm

#Admin Users Management Edit Validations
sjp.admin.users.management.edit.form.username.notNull = Username field can not be empty
sjp.admin.users.management.edit.form.username.notEmpty = Username field can not be empty
sjp.admin.users.management.edit.form.username.length = Username field can contain max 50 characters
sjp.admin.users.management.edit.form.email.notNull = E-Mail field can not be empty
sjp.admin.users.management.edit.form.email.notEmpty = E-Mail field can not be empty
sjp.admin.users.management.edit.form.email.length = E-Mail field can contain max 50 characters
sjp.admin.users.management.edit.form.email.email = E-Mail field must be a valid email address

#Admin OCS Management
sjp.admin.ocs.management.customerAccounts.title = Customer Accounts
sjp.admin.ocs.management.category.title = Categories
sjp.admin.ocs.management.product.title = Products

#Admin OCS Categories Management
sjp.admin.ocs.categories.management.addCategory = Add Category
sjp.admin.ocs.categories.management.addCategory.name = Name
sjp.admin.ocs.categories.management.addCategory.submit = Confirm
sjp.admin.ocs.categories.management.table.id = ID
sjp.admin.ocs.categories.management.table.name = Name
sjp.admin.ocs.categories.management.table.actions = Actions

#Admin OCS Categories Management Edit
sjp.admin.ocs.categories.management.editCategory = Edit Category:
sjp.admin.ocs.categories.management.editCategory.name = Name
sjp.admin.ocs.categories.management.editCategory.submit = Confirm

#Admin OCS Categories Management Validations
sjp.admin.ocs.categories.management.addCategory.name.notNull = Name field can not be empty
sjp.admin.ocs.categories.management.addCategory.name.notEmpty = Name field can not be empty
sjp.admin.ocs.categories.management.addCategory.name.length = Name field can contain max 100 characters

#Admin OCS Customer Account Management
sjp.admin.ocs.customer.accounts.management.table.id = ID
sjp.admin.ocs.customer.accounts.management.table.username = Username
sjp.admin.ocs.customer.accounts.management.table.firstName = First Name
sjp.admin.ocs.customer.accounts.management.table.lastName = Last Name
sjp.admin.ocs.customer.accounts.management.table.email = E-Mail
sjp.admin.ocs.customer.accounts.management.table.actions = Actions


#Admin OCS Products Management
sjp.admin.ocs.products.management.addProduct = Add Product
sjp.admin.ocs.products.management.addProduct.name = Name
sjp.admin.ocs.products.management.addProduct.category = Category
sjp.admin.ocs.products.management.addProduct.price = Price
sjp.admin.ocs.products.management.addProduct.stock = Stock
sjp.admin.ocs.products.management.addProduct.submit = Confirm
sjp.admin.ocs.products.management.table.id = ID
sjp.admin.ocs.products.management.table.name = Name
sjp.admin.ocs.products.management.table.category = Category
sjp.admin.ocs.products.management.table.price = Price
sjp.admin.ocs.products.management.table.stock = Stock
sjp.admin.ocs.products.management.table.actions = Actions


#Admin OCS Categories Management Edit


#Admin OCS Categories Management Validations


#############################################################

#Spring Java Portal Custom Validations
sjp.validation.passwordMatches = Passwords do not match
sjp.validation.unique.username = The Username specified already exists


#Access Denied Page
sjp.access.denied.title = Access Denied
sjp.access.denied.description = You not athorized to access the selected resource

#Error Page
sjp.error.page.title = Error
sjp.error.page.description = Application has encountered an error. Please contact support on ...